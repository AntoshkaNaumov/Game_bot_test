import re
import logging
import asyncio
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from keyboards import inline_kb, secondary_kb, third_kb, confirmation_kb, my_reports_kb,\
    create_game_stats_kb, create_report_kb
from keyboards import create_proficiency_type_keyboard, create_skills_keyboard, create_change_stats_keyboard,\
    create_habits_keyboard, create_goals_keyboard
from state import UserInfo, Report, ChangeStats


API_TOKEN = '5614902466:AAG5AcR0rd5Yrl-myulxQKQLJvR1n0O6ydI'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def create_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            birth TEXT,
            skills TEXT,
            habits TEXT,
            goals TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports (
            report_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            report_date TEXT,
            skill TEXT,
            proficiency_type TEXT,
            time_spent INTEGER,
            habits_observed TEXT,
            habits_not_observed TEXT,
            goals_achieved TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()


create_db()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def create_date_keyboard():
    today = datetime.now().date()
    keyboard = types.InlineKeyboardMarkup(row_width=7)
    for i in range(7):
        date = today - timedelta(days=i)
        callback_data = date.isoformat()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ISO-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞—Ç—ã
        button_text = date.strftime('%d.%m.%Y')
        keyboard.insert(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_name = message.from_user.first_name
    await message.answer(f"üëã–ó–¥–∞—Ä–æ–≤–∞ {user_name}! –≠—Ç–æ Life=Game_bot. ‚úÖ–û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —á—ë—Ç–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π"
                         f" –ø—Ä–æ–≥—Ä–µ—Å—Å, "
                         f"–±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö")

    # –ü–∞—É–∑–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)

    await message.answer("üéÆ –≠—Ç–æ—Ç –ø—Ä–∏—ë–º —à–∏—Ä–æ–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω –≤ –≤–∏–¥–µ–æ –∏–≥—Ä–∞—Ö! –ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è"
                         " —Å–Ω–æ–≤–∞ –∏ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å. üî•–Ø –∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç—É –º–µ—Ç–æ–¥–∏–∫—É"
                         " –≤ —Å–∞–º—É—é –≥–ª–∞–≤–Ω—É—é –∏–≥—Ä—É"
                         " –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'Real Life'. –ß—Ç–æ–±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –Ω–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞,"
                         " –∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è! ", reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_main_menu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é")
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=secondary_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query_handler(lambda c: c.data == 'game_stats')
async def process_callback_game_stats(callback_query: types.CallbackQuery):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (callback_query.from_user.id,))
    user_has_game_stats = cursor.fetchone() is not None

    conn.close()

    if user_has_game_stats:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–ò–≥—Ä–æ–≤–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=third_kb)
    else:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! –°–æ–∑–¥–∞–π –µ—ë –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                               reply_markup=create_game_stats_kb)


@dp.callback_query_handler(lambda c: c.data == 'create_game_stats')
async def process_callback_create_game_stats(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "1)–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º.(–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –§–ò–û")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'name'
    await UserInfo.name.set()


@dp.message_handler(state=UserInfo.name)
async def user_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await UserInfo.next()
    await bot.send_message(message.chat.id, '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∏–∫–Ω–µ–π–º –¥–ª—è —Ç–≤–æ–µ–π –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–Ω–µ—Å—ë–Ω')
    await asyncio.sleep(2)
    await bot.send_message(message.chat.id, '2)–í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ'
                                            '—É—Ä–æ–≤–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—ã—Ç–∞)')


@dp.message_handler(state=UserInfo.birth)
async def user_birth_date(message: types.Message, state: FSMContext):
    date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    if not re.match(date_pattern, message.text):
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '01.01.2000'")
        return

    async with state.proxy() as data:
        data['birth'] = message.text

    await UserInfo.next()
    await bot.send_message(message.chat.id, '–ö–ª–∞—Å—Å! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π Lvl –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!')
    await asyncio.sleep(2)
    await bot.send_message(message.chat.id, '3)–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å/–æ–±—Ä–µ—Å—Ç–∏?\n'
                                            'PS. –¢–∞–∫–∂–µ –æ—Ü–µ–Ω–∏ –Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ –≤ —Ç–æ–º –∏–ª–∏ –∏–Ω–æ–º –Ω–∞–≤—ã–∫–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –ø—Ä—è–º–æ '
                                            '—Å–µ–π—á–∞—Å. (–ù–∞ –∫–∞–∂–¥–æ–º —Ä–∞–Ω–≥–µ —Ä–∞–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫–∞—á–∫–∏, –ø–æ—ç—Ç–æ–º—É '
                                            '—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ)üëê.\n'
                                            '0-10 Lvl - "–ù–æ–≤–∏—á–æ–∫"\n'
                                            '10-20 Lvl - "–ù–∏–∂–µ-—Å—Ä–µ–¥–Ω–µ–≥–æ"\n'
                                            '20-30 Lvl - "–°—Ä–µ–¥–Ω–∏–π"\n'
                                            '30-40 Lvl - "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"\n'
                                            '40-50 Lvl - "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"\n'
                                            '50-60 Lvl - "–≠–∫—Å–ø–µ—Ä—Ç"\n'
                                            '60-70 Lvl - "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"\n'
                                            '70-80 Lvl - "–ú–∞—Å—Ç–µ—Ä"\n'
                                            '80-90 Lvl - "–í–µ–ª–∏–∫–∏–π"\n'
                                            '90-100 Lvl - "–õ—É—á—à–∏–π"\n'
                           )


@dp.message_handler(state=UserInfo.skills)
async def user_skills(message: types.Message, state: FSMContext):
    skill_pattern = r'^[–ê-–Ø–∞-—è—ë–ÅA-Za-z ]+ \d{1,2}$'
    skills = message.text.split('\n')

    for skill in skills:
        if not re.match(skill_pattern, skill.strip()):
            await bot.send_message(message.chat.id,
                                   "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –Ω–∞–≤—ã–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '(–∫–∞–∫–æ–π-—Ç–æ –Ω–∞–≤—ã–∫) (–ø–æ–¥—Ö–æ–¥—è—â–∏–π Lvl)'")
            return

    async with state.proxy() as data:
        data['skills'] = message.text

    await UserInfo.next()
    await bot.send_message(message.chat.id, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–Ω–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Ç–≤–æ—é –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!')
    await asyncio.sleep(2)
    await bot.send_message(message.chat.id, '4)–ö–∞–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø—Ä–∏–≤–∏—Ç—å/–∏–∑–±–∞–≤–∏—Ç—å—Å—è?')


@dp.message_handler(state=UserInfo.habits)
async def user_habits(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['habits'] = message.text

    await UserInfo.next()
    await bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å!\n'
                                            ' –ü—Ä–∏–≤—ã—á–∫–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    await asyncio.sleep(2)
    await bot.send_message(message.chat.id, '5)–ö–∞–∫–∏—Ö —Ü–µ–ª–µ–π —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –¥–æ—Å—Ç–∏—á—å –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 12 –º–µ—Å—è—Ü–µ–≤?\n'
                                            '(–∑–∞–ø–∏—Å—ã–≤–∞–π —Ü–µ–ª–∏ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏, –±—É–¥—Ç–æ —Ç—ã –∏—Ö —É–∂–µ –¥–æ—Å—Ç–∏–≥ –∏\n'
                                            '–ø–æ–¥–ø–∏—à–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Ç–∞ –∏–ª–∏ –∏–Ω–∞—è —Ü–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)')


@dp.message_handler(state=UserInfo.goals)
async def user_goals(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['goals'] = message.text

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    user_id = message.from_user.id

    name = data['name']
    birth = data['birth']
    skills = data['skills']
    habits = data['habits']
    goals = data['goals']

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    cursor.execute('''
        INSERT INTO users (user_id, name, birth, skills, habits, goals)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, name, birth, skills, habits, goals))
    conn.commit()
    conn.close()
    await bot.send_message(message.from_user.id, "–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
    await bot.send_message(message.chat.id,
                           '–ö–∞–∫–∏–µ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ —Ü–µ–ª–∏! –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –≥–æ—Ç–æ–≤—ã –ú–û–¢–ò–í–ò–†–û–í–ê–¢–¨ –¢–ï–ë–Ø –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å!')
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
@dp.callback_query_handler(lambda c: c.data == 'change_stats')
async def process_callback_change_stats(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
                           reply_markup=create_change_stats_keyboard())
    await ChangeStats.waiting_for_stat_choice.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('change_'), state=ChangeStats.waiting_for_stat_choice)
async def process_stat_choice(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    async with state.proxy() as data:
        data['stat_to_change'] = callback_query.data.split('_')[1]
    stat_to_change_text = {
        "name": "–ù–∏–∫–Ω–µ–π–º",
        "birth": "–î–∞—Ç—ã –†–æ–∂–¥–µ–Ω–∏—è",
        "skills": "–ù–∞–≤—ã–∫–∏",
        "habits": "–ü—Ä–∏–≤—ã—á–∫–∏",
        "goals": "–¶–µ–ª–∏"
    }
    await bot.send_message(callback_query.from_user.id,
                           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {stat_to_change_text[data['stat_to_change']]}:")
    await ChangeStats.waiting_for_new_value.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=ChangeStats.waiting_for_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        stat_to_change = data['stat_to_change']
        new_value = message.text
        user_id = message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    if stat_to_change == 'birth':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
        if not re.match(date_pattern, new_value):
            await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '01.01.2000'")
            return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    query = f'UPDATE users SET {stat_to_change} = ? WHERE user_id = ?'
    cursor.execute(query, (new_value, user_id))
    conn.commit()
    conn.close()

    await bot.send_message(message.chat.id, f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {stat_to_change} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ '{new_value}'!")
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
@dp.callback_query_handler(lambda c: c.data == 'clear_stats')
async def process_callback_clear_stats(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å—Å—è!",
                           reply_markup=confirmation_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data in ['accept', 'cancel'])
async def process_callback_confirmation(callback_query: types.CallbackQuery):
    if callback_query.data == 'accept':
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM users WHERE user_id = ?', (callback_query.from_user.id,))
        conn.commit()
        conn.close()
        await bot.answer_callback_query(callback_query.id, text="–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        await bot.send_message(callback_query.from_user.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    elif callback_query.data == 'cancel':
        await bot.answer_callback_query(callback_query.id, text="–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await bot.send_message(callback_query.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    await bot.send_message(callback_query.from_user.id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=secondary_kb)


@dp.callback_query_handler(lambda c: c.data == 'back')
async def process_callback_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é")
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=secondary_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç—á—ë—Ç—ã"
@dp.callback_query_handler(lambda c: c.data == 'reports')
async def process_callback_reports(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=my_reports_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –û—Ç—á—ë—Ç—ã"
@dp.callback_query_handler(lambda c: c.data == 'my_reports')
async def process_callback_my_reports(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM reports WHERE user_id = ?', (user_id,))
    reports = cursor.fetchall()
    conn.close()

    if reports:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–¢—É—Ç –±—É–¥—É—Ç —Ç–≤–æ–∏ –æ—Ç—á—ë—Ç—ã!")
        for report in reports:
            await bot.send_message(callback_query.from_user.id, f"–û—Ç—á—ë—Ç {report[0]}: {report[2]}")
    else:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞! –°–æ–∑–¥–∞–π –∂–µ –µ–≥–æ!",
                               reply_markup=create_report_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –û—Ç—á–µ—Ç"
@dp.callback_query_handler(lambda c: c.data == 'create_report')
async def process_callback_create_report(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
    user_has_game_stats = cursor.fetchone() is not None

    conn.close()

    if user_has_game_stats:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "1) –î–ª—è –∫–∞–∫–æ–≥–æ –¥–Ω—è —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç? –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
                               reply_markup=create_date_keyboard())

        await state.set_state(Report.choosing_date)
    else:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–ë–µ–∑ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç!"
                                                            " –°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                               reply_markup=create_game_stats_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
@dp.callback_query_handler(state=Report.choosing_date)
async def process_callback_choose_date(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    chosen_date = datetime.fromisoformat(callback_query.data).date()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(chosen_date=chosen_date)

    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           f"–≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {chosen_date.strftime('%d.%m.%Y')} - –¥–µ–Ω—å –¥–ª—è –æ—Ç—á—ë—Ç–∞")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT skills FROM users WHERE user_id = ?', (user_id,))
    user_skills = cursor.fetchone()
    conn.close()

    if user_skills:
        skills = user_skills[0].split(',')
        await bot.send_message(callback_query.from_user.id, "2) –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∫–∞—á–∞–ª?",
                               reply_markup=create_skills_keyboard(skills))
        await state.set_state(Report.skills_report)
    else:
        await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('skill_'), state=Report.skills_report)
async def add_report_data1(callback_query: types.CallbackQuery, state: FSMContext):
    skill = callback_query.data.split('_')[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(skill=skill)

    await bot.send_message(callback_query.from_user.id, "3) –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–∫–∞—á–∫–∏:",
                           reply_markup=create_proficiency_type_keyboard())
    await state.set_state(Report.method)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–∫–∞—á–∫–∏
@dp.callback_query_handler(lambda c: c.data in ['practical_proficiency', 'theoretical_proficiency'],
                           state=Report.method)
async def process_proficiency_type_choice(callback_query: types.CallbackQuery, state: FSMContext):
    proficiency_type = "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ü—Ä–æ–∫–∞—á–∫–∞" if callback_query.data == 'practical_proficiency'\
        else "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –ü—Ä–æ–∫–∞—á–∫–∞"

    await state.update_data(proficiency_type=proficiency_type)

    await bot.send_message(callback_query.from_user.id, "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã —ç—Ç–æ –¥–µ–ª–∞–ª (1 –º–∏–Ω—É—Ç–∞ = 1 –•–†)?")
    await state.set_state(Report.input_time)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(state=Report.input_time)
async def process_input_time(message: types.Message, state: FSMContext):
    time_spent = int(message.text)

    async with state.proxy() as data:
        data['time_spent'] = time_spent

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∫–∞—á–∞–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
    if time_spent >= 100:
        await bot.send_message(message.chat.id, "–ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")
    else:
        await bot.send_message(message.chat.id, "–ó–∞–≤—Ç—Ä–∞ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–ª—É—á—à–µ, –ø—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é!")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT habits FROM users WHERE user_id = ?', (user_id,))
    user_habits = cursor.fetchone()
    conn.close()

    if user_habits and user_habits[0]:
        habits = user_habits[0].split(',')
        async with state.proxy() as data:
            data['all_habits'] = habits
        await bot.send_message(message.chat.id, "3) –ü–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫–∏ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±–ª—é–¥–∞–ª.",
                               reply_markup=create_habits_keyboard(habits))
    else:
        await bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫!")
    await state.set_state(Report.habits_report)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç—á–µ—Ç
@dp.callback_query_handler(lambda c: c.data.startswith('habit_'), state=Report.habits_report)
async def add_report_data3(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if 'habits' not in data:
            data['habits'] = []
        data['habits'].append(callback_query.data.split('_')[1])

    await callback_query.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞!")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        chosen_habits = data.get('habits', [])
        all_habits = data.get('all_habits', [])

    total_habits = len(all_habits)
    chosen_habits_count = len(chosen_habits)
    if total_habits > 0 and chosen_habits_count / total_habits >= 0.5:
        await bot.send_message(callback_query.from_user.id, "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ù–µ —Å–¥–∞–≤–∞–π—Å—è!")
    else:
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤—ã—á–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ–∫–æ–ª–æ 30 –¥–Ω–µ–π, –Ω–µ –æ–±–Ω—É–ª—è–π –ø—Ä–æ–≥—Ä–µ—Å—Å")

    await asyncio.sleep(2)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = callback_query.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT goals FROM users WHERE user_id = ?', (user_id,))
    user_goals = cursor.fetchone()
    conn.close()

    if user_goals and user_goals[0]:
        goals = user_goals[0].split(',')
        await bot.send_message(callback_query.from_user.id, "4) –ö –∫–∞–∫–∏–º —Ü–µ–ª—è–º —Ç—ã —Å—Ç–∞–ª –±–ª–∏–∂–µ? (–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞—Ç—å)",
                               reply_markup=create_goals_keyboard(goals))
        await state.set_state(Report.goals_report)
        asyncio.create_task(send_goal_reminder(user_id, state))
    else:
        await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π!")
        await save_report_and_finalize(user_id, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã create_goals_keyboard
@dp.callback_query_handler(lambda c: c.data.startswith('goal_'), state=Report.goals_report)
async def process_goals_report(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if 'goals' not in data:
            data['goals'] = []
        data['goals'].append(callback_query.data.split('_')[1])

    await callback_query.answer("–¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞!")
    await save_report_and_finalize(callback_query.from_user.id, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤
async def save_report_and_finalize(user_id, state):
    async with state.proxy() as data:
        chosen_date = data['chosen_date']
        skill = data['skill']
        proficiency_type = data['proficiency_type']
        time_spent = data['time_spent']
        chosen_habits = data['habits']
        all_habits = data['all_habits']
        chosen_goals = data.get('goals', [])

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±–ª—é–¥–µ–Ω–Ω—ã—Ö –∏ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    observed_habits = [habit for habit in chosen_habits]
    not_observed_habits = [habit for habit in all_habits if habit not in chosen_habits]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO reports (user_id, report_date, skill, proficiency_type, time_spent, habits_observed, habits_not_observed, goals_achieved)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, chosen_date, skill, proficiency_type, time_spent, ','.join(observed_habits), ','.join(not_observed_habits), ','.join(chosen_goals)))
    conn.commit()
    conn.close()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    final_message = (
        f"–ò—Ç–æ–≥\n"
        f"–ù–∞–≤—ã–∫: {skill} + {time_spent} –•–† + 1 Lvl\n"
        f"–°–æ–±–ª—é–¥–µ–Ω—ã –ø—Ä–∏–≤—ã—á–∫–∏: {', '.join(observed_habits)}\n"
        f"–ù–µ —Å–æ–±–ª—é–¥–µ–Ω—ã: {', '.join(not_observed_habits)}\n"
        f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏: {', '.join([goal + ' + 1%' for goal in chosen_goals])}\n"
    )
    await bot.send_message(user_id, final_message)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await state.finish()


# –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª—è—Ö
async def send_goal_reminder(user_id, state):
    await asyncio.sleep(10)
    async with state.proxy() as data:
        if 'goals' not in data or not data['goals']:
            await bot.send_message(user_id, "–î—Ä—É–∂–æ–∫! –¶–µ–ª–∏ —Å–∞–º–∏ —Å–µ–±—è –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –≤—Å—Ç–∞–≤–∞–π —Å –¥–∏–≤–∞–Ω–∞!")
            await save_report_and_finalize(user_id, state)


@dp.callback_query_handler(lambda c: c.data == 'back')
async def process_callback_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=secondary_kb)
    # –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –¥—Ä—É–≥–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –ª–æ–≥–∏–∫–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç—á–µ—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'back_from_reports')
async def process_callback_back_from_reports(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", reply_markup=secondary_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª—É–∂–±–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏"
@dp.callback_query_handler(lambda c: c.data == 'support_services')
async def process_callback_support_services(callback_query: types.CallbackQuery):
    support_text = "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å—é–¥–∞, –µ—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ:"
    support_link = "https://example.com/support"

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"{support_text}\n{support_link}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
